//
// Generated file, do not edit! Created by nedtool 5.6 from node/communication/routing/konstant2019/konstant2019Packet.msg.
//

#ifndef __KONSTANT2019PACKET_M_H
#define __KONSTANT2019PACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "node/communication/routing/RoutingPacket_m.h"
#include "helpStructures/GeoMathHelper.h"
typedef std::vector<int> IntVector;
// }}

/**
 * Enum generated from <tt>node/communication/routing/konstant2019/konstant2019Packet.msg:30</tt> by nedtool.
 * <pre>
 * enum konstant2019Packet_Type
 * {
 *     GP_ROUTING_CONTROL_PACKET = 1;
 *     GP_ROUTING_DATA_PACKET = 2;
 *     GP_ROUTING_JOIN_PACKET = 3;
 *     GP_ROUTING_ADV_PACKET = 4;
 * }
 * </pre>
 */
enum konstant2019Packet_Type {
    GP_ROUTING_CONTROL_PACKET = 1,
    GP_ROUTING_DATA_PACKET = 2,
    GP_ROUTING_JOIN_PACKET = 3,
    GP_ROUTING_ADV_PACKET = 4
};

/**
 * Class generated from <tt>node/communication/routing/konstant2019/konstant2019Packet.msg:38</tt> by nedtool.
 * <pre>
 * packet konstant2019Packet extends RoutingPacket
 * {
 *     int konstant2019PacketKind \@enum(konstant2019Packet_Type);
 *     int sourceId;
 *     int schedule[];
 *     double remainingEnergy;
 *     int sourceCH;
 *     IntVector isCH;
 *     IntVector nextCH;
 *     IntVector trace;
 * }
 * </pre>
 */
class konstant2019Packet : public ::RoutingPacket
{
  protected:
    int konstant2019PacketKind;
    int sourceId;
    int *schedule; // array ptr
    unsigned int schedule_arraysize;
    double remainingEnergy;
    int sourceCH;
    IntVector isCH;
    IntVector nextCH;
    IntVector trace;

  private:
    void copy(const konstant2019Packet& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const konstant2019Packet&);

  public:
    konstant2019Packet(const char *name=nullptr, short kind=0);
    konstant2019Packet(const konstant2019Packet& other);
    virtual ~konstant2019Packet();
    konstant2019Packet& operator=(const konstant2019Packet& other);
    virtual konstant2019Packet *dup() const override {return new konstant2019Packet(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getKonstant2019PacketKind() const;
    virtual void setKonstant2019PacketKind(int konstant2019PacketKind);
    virtual int getSourceId() const;
    virtual void setSourceId(int sourceId);
    virtual void setScheduleArraySize(unsigned int size);
    virtual unsigned int getScheduleArraySize() const;
    virtual int getSchedule(unsigned int k) const;
    virtual void setSchedule(unsigned int k, int schedule);
    virtual double getRemainingEnergy() const;
    virtual void setRemainingEnergy(double remainingEnergy);
    virtual int getSourceCH() const;
    virtual void setSourceCH(int sourceCH);
    virtual IntVector& getIsCH();
    virtual const IntVector& getIsCH() const {return const_cast<konstant2019Packet*>(this)->getIsCH();}
    virtual void setIsCH(const IntVector& isCH);
    virtual IntVector& getNextCH();
    virtual const IntVector& getNextCH() const {return const_cast<konstant2019Packet*>(this)->getNextCH();}
    virtual void setNextCH(const IntVector& nextCH);
    virtual IntVector& getTrace();
    virtual const IntVector& getTrace() const {return const_cast<konstant2019Packet*>(this)->getTrace();}
    virtual void setTrace(const IntVector& trace);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const konstant2019Packet& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, konstant2019Packet& obj) {obj.parsimUnpack(b);}


#endif // ifndef __KONSTANT2019PACKET_M_H

