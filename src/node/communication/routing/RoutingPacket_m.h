//
// Generated file, do not edit! Created by nedtool 5.6 from node/communication/routing/RoutingPacket.msg.
//

#ifndef __ROUTINGPACKET_M_H
#define __ROUTINGPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Struct generated from node/communication/routing/RoutingPacket.msg:21 by nedtool.
 */
struct NetMacInfoExchange_type
{
    NetMacInfoExchange_type();
    double RSSI;
    double LQI;
    int nextHop;
    int lastHop;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const NetMacInfoExchange_type& a);
void __doUnpacking(omnetpp::cCommBuffer *b, NetMacInfoExchange_type& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NetMacInfoExchange_type& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NetMacInfoExchange_type& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>node/communication/routing/RoutingPacket.msg:32</tt> by nedtool.
 * <pre>
 * packet RoutingPacket
 * {
 *     NetMacInfoExchange_type netMacInfoExchange;
 * 
 *     int TTL = 10000;
 *     int hopCount = 0;
 *     double distanceCount = 0;
 *     int source;
 *     int destination;
 *     string sourceAddress;
 *     string destinationAddress;
 *     unsigned int sequenceNumber;
 * }
 * </pre>
 */
class RoutingPacket : public ::omnetpp::cPacket
{
  protected:
    NetMacInfoExchange_type netMacInfoExchange;
    int TTL;
    int hopCount;
    double distanceCount;
    int source;
    int destination;
    ::omnetpp::opp_string sourceAddress;
    ::omnetpp::opp_string destinationAddress;
    unsigned int sequenceNumber;

  private:
    void copy(const RoutingPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RoutingPacket&);

  public:
    RoutingPacket(const char *name=nullptr, short kind=0);
    RoutingPacket(const RoutingPacket& other);
    virtual ~RoutingPacket();
    RoutingPacket& operator=(const RoutingPacket& other);
    virtual RoutingPacket *dup() const override {return new RoutingPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual NetMacInfoExchange_type& getNetMacInfoExchange();
    virtual const NetMacInfoExchange_type& getNetMacInfoExchange() const {return const_cast<RoutingPacket*>(this)->getNetMacInfoExchange();}
    virtual void setNetMacInfoExchange(const NetMacInfoExchange_type& netMacInfoExchange);
    virtual int getTTL() const;
    virtual void setTTL(int TTL);
    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);
    virtual double getDistanceCount() const;
    virtual void setDistanceCount(double distanceCount);
    virtual int getSource() const;
    virtual void setSource(int source);
    virtual int getDestination() const;
    virtual void setDestination(int destination);
    virtual const char * getSourceAddress() const;
    virtual void setSourceAddress(const char * sourceAddress);
    virtual const char * getDestinationAddress() const;
    virtual void setDestinationAddress(const char * destinationAddress);
    virtual unsigned int getSequenceNumber() const;
    virtual void setSequenceNumber(unsigned int sequenceNumber);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RoutingPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RoutingPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __ROUTINGPACKET_M_H

