//
// Generated file, do not edit! Created by nedtool 5.6 from node/communication/mac/mac802154TSCHlite/distributed/MCMTMac/MCMTMacPacket.msg.
//

#ifndef __MCMTMACPACKET_M_H
#define __MCMTMACPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "node/communication/mac/mac802154TSCHlite/MAC802154LitePacket_m.h"
// }}

/**
 * Enum generated from <tt>node/communication/mac/mac802154TSCHlite/distributed/MCMTMac/MCMTMacPacket.msg:21</tt> by nedtool.
 * <pre>
 * enum MCMTMACPacket_type
 * {
 *     HELLO = 0; //all nodes does
 *     ASSIGN = 1; //only BD
 *     INFO = 2; //only BD
 *     BD_CLAIM = 3; //only BD
 *     BATCH_CLAIM = 4; //all nodes does
 *     DONE = 5; //all nodes does
 * }
 * </pre>
 */
enum MCMTMACPacket_type {
    HELLO = 0,
    ASSIGN = 1,
    INFO = 2,
    BD_CLAIM = 3,
    BATCH_CLAIM = 4,
    DONE = 5
};

/**
 * Enum generated from <tt>node/communication/mac/mac802154TSCHlite/distributed/MCMTMac/MCMTMacPacket.msg:30</tt> by nedtool.
 * <pre>
 * enum MCMTMACGeoColor_type
 * {
 *     GREEN = 0;
 *     RED = 1;
 *     PURPLE = 2;
 *     YELLOW = 3;
 * }
 * </pre>
 */
enum MCMTMACGeoColor_type {
    GREEN = 0,
    RED = 1,
    PURPLE = 2,
    YELLOW = 3
};

/**
 * Class generated from <tt>node/communication/mac/mac802154TSCHlite/distributed/MCMTMac/MCMTMacPacket.msg:37</tt> by nedtool.
 * <pre>
 * packet MCMTMACPacket extends MAC802154LitePacket
 * {
 *     //default args
 *     int MCMTMACPacketType \@enum(MCMTMACPacket_type);
 * 
 *     bool hasEncapsulatedPacket = false;
 *     bool isBlankChainAssign = false;
 * 
 *     //since omnet++ is not allowing us to have cyclic reference, we have to resort to this
 *     int encapsulatedNodeId = -1;
 *     int encapsulatedParentId = -1;
 *     int encapsulatedCHId = -1;
 *     int encapsulatedTransmissionCount = -1;
 *     int encapsulatedGeocolor = -1;
 * 
 *     int parentId;
 *     int CHId;
 *     int sourceGeoColor \@enum(MCMTMACGeoColor_type);
 *     int transmissionCount;
 * 
 *     int batchClaimTimeslots[]; //timeslot, channelId
 *     int batchClaimChannelIds[]; //timeslot, channelId
 * 
 *     int singleClaimTimeslot;
 *     int singleChannelId;
 * }
 * </pre>
 */
class MCMTMACPacket : public ::MAC802154LitePacket
{
  protected:
    int MCMTMACPacketType;
    bool hasEncapsulatedPacket;
    bool isBlankChainAssign;
    int encapsulatedNodeId;
    int encapsulatedParentId;
    int encapsulatedCHId;
    int encapsulatedTransmissionCount;
    int encapsulatedGeocolor;
    int parentId;
    int CHId;
    int sourceGeoColor;
    int transmissionCount;
    int *batchClaimTimeslots; // array ptr
    unsigned int batchClaimTimeslots_arraysize;
    int *batchClaimChannelIds; // array ptr
    unsigned int batchClaimChannelIds_arraysize;
    int singleClaimTimeslot;
    int singleChannelId;

  private:
    void copy(const MCMTMACPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MCMTMACPacket&);

  public:
    MCMTMACPacket(const char *name=nullptr, short kind=0);
    MCMTMACPacket(const MCMTMACPacket& other);
    virtual ~MCMTMACPacket();
    MCMTMACPacket& operator=(const MCMTMACPacket& other);
    virtual MCMTMACPacket *dup() const override {return new MCMTMACPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getMCMTMACPacketType() const;
    virtual void setMCMTMACPacketType(int MCMTMACPacketType);
    virtual bool getHasEncapsulatedPacket() const;
    virtual void setHasEncapsulatedPacket(bool hasEncapsulatedPacket);
    virtual bool getIsBlankChainAssign() const;
    virtual void setIsBlankChainAssign(bool isBlankChainAssign);
    virtual int getEncapsulatedNodeId() const;
    virtual void setEncapsulatedNodeId(int encapsulatedNodeId);
    virtual int getEncapsulatedParentId() const;
    virtual void setEncapsulatedParentId(int encapsulatedParentId);
    virtual int getEncapsulatedCHId() const;
    virtual void setEncapsulatedCHId(int encapsulatedCHId);
    virtual int getEncapsulatedTransmissionCount() const;
    virtual void setEncapsulatedTransmissionCount(int encapsulatedTransmissionCount);
    virtual int getEncapsulatedGeocolor() const;
    virtual void setEncapsulatedGeocolor(int encapsulatedGeocolor);
    virtual int getParentId() const;
    virtual void setParentId(int parentId);
    virtual int getCHId() const;
    virtual void setCHId(int CHId);
    virtual int getSourceGeoColor() const;
    virtual void setSourceGeoColor(int sourceGeoColor);
    virtual int getTransmissionCount() const;
    virtual void setTransmissionCount(int transmissionCount);
    virtual void setBatchClaimTimeslotsArraySize(unsigned int size);
    virtual unsigned int getBatchClaimTimeslotsArraySize() const;
    virtual int getBatchClaimTimeslots(unsigned int k) const;
    virtual void setBatchClaimTimeslots(unsigned int k, int batchClaimTimeslots);
    virtual void setBatchClaimChannelIdsArraySize(unsigned int size);
    virtual unsigned int getBatchClaimChannelIdsArraySize() const;
    virtual int getBatchClaimChannelIds(unsigned int k) const;
    virtual void setBatchClaimChannelIds(unsigned int k, int batchClaimChannelIds);
    virtual int getSingleClaimTimeslot() const;
    virtual void setSingleClaimTimeslot(int singleClaimTimeslot);
    virtual int getSingleChannelId() const;
    virtual void setSingleChannelId(int singleChannelId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MCMTMACPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MCMTMACPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __MCMTMACPACKET_M_H

