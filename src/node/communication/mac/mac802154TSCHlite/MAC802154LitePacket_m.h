//
// Generated file, do not edit! Created by nedtool 5.6 from node/communication/mac/MAC802154TSCHLite/MAC802154LitePacket.msg.
//

#ifndef __MAC802154LITEPACKET_M_H
#define __MAC802154LITEPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "node/communication/mac/MacPacket_m.h"
// }}

/**
 * Enum generated from <tt>node/communication/mac/MAC802154TSCHLite/MAC802154LitePacket.msg:19</tt> by nedtool.
 * <pre>
 * enum MAC802154LitePacket_type
 * {
 *     //packet type for data sending through the WC
 *     DATA_TSCH_PACKET = 0;
 * 
 *     //packet types for controls signalling (if neededs), bypassing WC for now
 *     ACK_TSCH_PACKET = 1;
 *     CONTROL_TSCH_PACKET = 2;
 * }
 * </pre>
 */
enum MAC802154LitePacket_type {
    DATA_TSCH_PACKET = 0,
    ACK_TSCH_PACKET = 1,
    CONTROL_TSCH_PACKET = 2
};

/**
 * Class generated from <tt>node/communication/mac/MAC802154TSCHLite/MAC802154LitePacket.msg:29</tt> by nedtool.
 * <pre>
 * packet MAC802154LitePacket extends MacPacket
 * {
 *     int TSCHPacketType \@enum(MAC802154LitePacket_type);
 * }
 * </pre>
 */
class MAC802154LitePacket : public ::MacPacket
{
  protected:
    int TSCHPacketType;

  private:
    void copy(const MAC802154LitePacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MAC802154LitePacket&);

  public:
    MAC802154LitePacket(const char *name=nullptr, short kind=0);
    MAC802154LitePacket(const MAC802154LitePacket& other);
    virtual ~MAC802154LitePacket();
    MAC802154LitePacket& operator=(const MAC802154LitePacket& other);
    virtual MAC802154LitePacket *dup() const override {return new MAC802154LitePacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getTSCHPacketType() const;
    virtual void setTSCHPacketType(int TSCHPacketType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MAC802154LitePacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MAC802154LitePacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __MAC802154LITEPACKET_M_H

